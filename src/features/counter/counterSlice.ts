import { createAsyncThunk, createSlice, PayloadAction } from '@reduxjs/toolkit';
import { RootState, AppThunk } from '../../app/store';
import { fetchCount } from './counterAPI';

export interface CounterState {
  value: number;
  cartList: [];
  popup: boolean;
  popup2: boolean;
  status: 'idle' | 'loading' | 'failed';
}

const initialState: CounterState = {
  value: 0,
  cartList: [],
  popup: false,
  popup2: false,
  status: 'idle',
};

// The function below is called a thunk and allows us to perform async logic. It
// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This
// will call the thunk with the `dispatch` function as the first argument. Async
// code can then be executed and other actions can be dispatched. Thunks are
// typically used to make async requests.
export const incrementAsync = createAsyncThunk(
    'counter/fetchCount',
    async (amount: number) => {
      const response = await fetchCount(amount);
      // The value we return becomes the `fulfilled` action payload
      return response.data;
    }
);

export const counterSlice = createSlice({
  name: 'counter',
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    showPopup: (state) => {
        state.popup = true;
    },
    hidePopup: (state) => {
        state.popup = false;
    },
    hidePopup2: (state) => {
       state.popup2 = false;
    },
    addItemID: (state, action) => {
      // Redux Toolkit allows us to write "mutating" logic in reducers. It
      // doesn't actually mutate the state because it uses the Immer library,
      // which detects changes to a "draft state" and produces a brand new
      // immutable state based off those changes
      let isAlreadyAdded = false;
      for (let i = 0; i < state.cartList.length; i++) {
        // @ts-ignore
        if (state.cartList[i].id == action.payload.id) {
          isAlreadyAdded = true;
        }
      }
      // @ts-ignore
      if(!isAlreadyAdded) {
        // @ts-ignore
        state.cartList.push(action.payload);
        state.popup2 = true;
      }

    },
    decrement: (state) => {
      state.value -= 1;
    },

    removeItem: (state, action) => {
      let i = 0;
      // @ts-ignore
      while (action.payload != state.cartList[i].id) i++;
      state.cartList.splice(i, 1);
    },
    // Use the PayloadAction type to declare the contents of `action.payload`
    incrementByAmount: (state, action: PayloadAction<number>) => {
      state.value += action.payload;
    },
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
        .addCase(incrementAsync.pending, (state) => {
          state.status = 'loading';
        })
        .addCase(incrementAsync.fulfilled, (state, action) => {
          state.status = 'idle';
          state.value += action.payload;
        })
        .addCase(incrementAsync.rejected, (state) => {
          state.status = 'failed';
        });
  },
});

export const { showPopup, hidePopup, hidePopup2, addItemID, decrement,
    removeItem, incrementByAmount } = counterSlice.actions;

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`
export const selectCount = (state: RootState) => state.counter.value;

export const selectPopup = (state: RootState) => state.counter.popup;
export const selectPopup2 = (state: RootState) => state.counter.popup2;

export const selectCartList = (state: RootState) => state.counter.cartList;
// We can also write thunks by hand, which may contain both sync and async logic.
// Here's an example of conditionally dispatching actions based on current state.
export const incrementIfOdd =
    (amount: number): AppThunk =>
        (dispatch, getState) => {
          const currentValue = selectCount(getState());
          if (currentValue % 2 === 1) {
            dispatch(incrementByAmount(amount));
          }
        };

export default counterSlice.reducer;
